//////////////use shared library same with Jenkinsfile///////////

def brch= scm.branches[0].toString().replace('*/','')
def libver="bitbucket-groovytest-lib@Menu-demo-good"
//1) library identifier: "bitbucket-groovytest-lib@${brch}", retriever: modernSCM(
//  [$class: 'GitSCMSource', remote: repo, credentialsId: ''])  //from any repo without definiation src excluded
library identifier: "bitbucket-groovytest-lib@${brch}", retriever:legacySCM(scm)  //from local repo without definiation
//3):library("bitbucket-groovytest-lib@${brch}") _         //from repo defined in system config, src excluded
//@Library('bitbucket-groovytest-lib@Menu-demo-good')      //from repo defined in system config, vars/src/resouces included

import groovy.json.JsonSlurper

import hudson.model.*
import jenkins.model.*

/*Define the credentials ID used in Jenkins
def credentialsId = 'accessAndSecretKeys' // Replace with your actual AWS credentials ID
// Fetch the AWS credentials from Jenkins
def creds = com.cloudbees.plugins.credentials.CredentialsProvider.lookupCredentials(com.cloudbees.jenkins.plugins.awscredentials.AWSCredentialsImpl.class,
    jenkins.model.Jenkins.instance,null,null).find { it.id == credentialsId }

if (creds == null) {
    throw new RuntimeException("AWS credentials not found in Jenkins with ID: ${credentialsId}")}

// Extract AWS access key and secret key from the credentials
def awsAccessKey = creds.accessKey
def awsSecretKey = creds.secretKey.plainText

// Initialize the S3 client
def jobstr="${env.JOB_NAME}"
println "jobstr:$jobstr"
def ret = getClass().protectionDomain.codeSource.location.path
println "groovyshell=$ret"
def wksp = menu.getWksp()
println "wksp=$ret"
def repo = scm.getUserRemoteConfigs()[0].toString().replace(' (null)','').replace('null => ','')
println "repo=$repo"
def mybr=menu.getURL()*/
menu.initEnvars()
println "printenv".execute().text

println "---------list all envar------------"
println "build=${env.BUILD_URL}"
//env.getEnvironment().each { name, value -> println "env.${name}=${value}" }
//println foo('HQ')

@groovy.transform.Field
def mybrch="{brch}"
@groovy.transform.Field
def envList=['DEV','BAT']
@groovy.transform.Field
def serversList=[DEV: ['s111','ss222','ss333'],
                 BAT: ['s444','s555','s666'] ] 
@groovy.transform.Field
def defaultList=['ss333', 's555']
@groovy.transform.Field
def target="hongqizhang@localhost"

//import com.wavecloud.Hello;
//def hl=new Hello()
//println hl.hello("WORLD HQ!")
String buildDefault(List out,String key){
   def ret=[]
   out.each{ if(it.contains(key)){ ret.add(0, it) } else { ret.add(it) } }
   if (ret.isEmpty()) {return ['NotFound']}
   return ret
}
String setDefault(List out,String key){
   def ret=[]
   out.each{ if(it.contains(key)){ ret.add(0,'"'+it+'"') }  else { ret.add('"'+it+'"') } } 
   if (ret.isEmpty()) {return ['NotFound']}
   return ret
}         
String getServerList(String refvar){
    def map=[:]
    envList.eachWithIndex{ it,index->
       map[it]=setDefault(serversList[it],defaultList[index])
    }
    return """def map=${map}
    |return map[${refvar}]
    |""".stripMargin()
}

def getPackList(String mypath, String dft){
    println("enter getPack()")
    ret=[]
    def out="ssh ${target} ls ${mypath}/*.tar.gz".execute().text
    println "out=$out"
    out.readLines().each{ if( it.contains(dft) ){ ret.add(0,'"'+it+'"') } else { ret.add('"'+it+'"') } }
    if (ret.isEmpty()) {return ['NotFound']}
    return """ return ${ret} """
}         
def getPackScript(String mypath, String dft){
  println("enter getPackScript()")
  return """ret=[]
  |def out="ssh ${target} ls ${mypath}/*.tar.gz".execute().text
  |out.readLines().each{ if( it.contains(\"${dft}\") ){ ret.add(0,it) } else { ret.add(it) } }
  |return ret
  |""".stripMargin()
}
/*
def getFileList(String wksp, String dft){
    println("enter getFile()")
    def ret=[]
    def out="ls ${wksp}/release  ".execute().text
    println "out=$out"
    out.readLines().each{ 
        if( it.contains(dft) ){ ret.add(0,'"'+it+'"') } 
    else { ret.add"'+it+'"') } }
    if (ret.isEmpty()) {return ['NotFound']}
    }
    return """ return ${ret} """
}  */              
def getFileScript(String wksp, String dft){
    println("enter getFileScript()....")
  return """def ret=[]
  |def out="ls ${wksp}/release  ".execute().text
  |out.readLines().each{ if( it.contains(\"${dft}\") ){ ret.add(0,it) } else { ret.add(it) } }
  |if (ret.isEmpty()) {return ['NotFound']}
  |return ret
  |""".stripMargin()
}
def getContentScript(String refvar){
    println("enter getContentScript()....")
    def base="https://raw.githubusercontent.com/hqzhang/groovytest"
    def brch='mytest'
    return """
    |out="curl ${base}/${brch}/\${${refvar}}".execute().text
    |out=out.replaceAll('components:\\n','')
    |return \"\"\" <textarea name=\"value\"  value  class=\"setting-input  \" type=\"text\" rows="10" cols="25">\${out}</textarea> \"\"\"
    | """.stripMargin()
}

def getContentHub(String refvar ){
    println("enter getContentHub()....")
    return """
    |out="curl https://bitbucket.org/wave-cloud/groovytest/raw/${brch}/\${${refvar}}".execute().text
    |out=out.replaceAll('components:\\n','')
    |return \"\"\" <textarea name=\"value\"  value  class=\"setting-input  \" type=\"text\" rows="10" cols="25">\${out}</textarea> \"\"\"
    | """.stripMargin()
}

String getBranchList(String refvar){
   def dft=''
   def repo='https://fredzhang123@bitbucket.org/wave-cloud/groovytest.git'
   return """ def ret=[]
   |def myrepo=\'${repo}\'+${refvar}+'.git'
   |def out = "git ls-remote --heads ${repo}".execute().text
   |out = out.readLines().collect { it.split()[1].replaceAll('refs/heads/', '') }
   |out.each{ if( it.contains('') ){ ret.add(0,it) } else { ret.add(it) } }
   |return ret
   |""".stripMargin()
}
String getBranchScript(String repo, String dft ){
   return """def ret=[]
   |def url='https://github.com/hqzhang/'+\'${repo}\'+'.git'
   |def out = "git ls-remote --heads \${url}".execute().text
   |out = out.readLines().collect { it.split()[1].replaceAll('refs/heads/', '') }
   |out.each{ if( it.contains(\"${dft}\") ){ ret.add(0,it) } else { ret.add(it) } }
   |return ret
   | """.stripMargin()
}

String getFileHubList(String repo, String folder,String brch ){
   println "Enter getFileHubList()"
   def ret=[]
   def cmd = """curl https://api.github.com/repos/${repo}/git/trees/${brch}?recursive=2  """
   println "cmd=$cmd"
   def out = cmd.execute().text
   //println "out=$out"
   def jsonSlurper = new JsonSlurper()
   def obj = jsonSlurper.parseText(out)
   obj['tree'].each{ if ( it['path'].contains(folder) && it['path'].contains('.yaml') ) { ret.add('"'+it['path']+'"') }  }
   //println "obj=$obj"
   if (ret.isEmpty()) {return ['NotFound']}
   return """ return ${ret} """

}

String getFileHubScript(String repo, String folder,String brch ){
   return """import groovy.json.JsonSlurper
   |def ret=[]
   |def cmd = "curl https://api.github.com/repos/${repo}/git/trees/${brch}?recursive=2  "
   |def out = cmd.execute().text
   |def jsonSlurper = new JsonSlurper()
   |def obj = jsonSlurper.parseText(out)
   |obj['tree'].each{ if(it['path'].contains("${folder}/") ) { ret.add(it['path'])}  }
   |if (ret.isEmpty()) {return ['NotFound']}
   |return ret
   | """.stripMargin()
}

def getFileBitList(String repo, String folder, String brch){
    println "ener getFileBit()"
    def repoPR="https://api.bitbucket.org/2.0/repositories/$repo/src/${brch}/release"
    def ret=[]
    def cmd="curl --request GET ${repoPR}  "
    println "$cmd"
    def out=cmd.execute().text
    def json=new JsonSlurper()
    def obj=json.parseText(out)
    obj['values'].each { ret.add('"'+it['path']+'"')}
    if (ret.isEmpty()) {return ['NotFound']}
    return """ return ${ret} """
    
}

def getFileBitScript(String repo, String folder, String brch){
    return """import groovy.json.JsonSlurper
    |def ret=[]
    |def repoPR="https://api.bitbucket.org/2.0/repositories/${repo}/src/${brch}/release"
    |def cmd="curl --request GET \${repoPR}  "
    |def out=cmd.execute().text
    |def json=new JsonSlurper()
    |def obj=json.parseText(out)
    |obj['values'].each { ret.add(it['path'])}
    |if (ret.isEmpty()) {return ['NotFound']}
    |return ret
    | """.stripMargin()
}
def verify(String brch){
   def SolutionConfig="solution.yaml"
   def out="cat /var/root/.jenkins/workspace/agroovytest/release/${SolutionConfig}".execute().text
   out="curl https://bitbucket.org/wave-cloud/groovytest/raw/${brch}/release/${SolutionConfig}".execute().text
   out=out.replaceAll('components:\n','')
   return """ <textarea name="value"  value  class="setting-input  " type="text" rows="10" cols="25">${out}</textarea> """
}
//println menu.getTypeScript()
//println menu.getTypeVerify()
//println menu.verifytest()
//println menu.verify2('release/a.yaml')
println "---------parameters start------------"
//////////////////
//def envList=['BAT','DEV']
def myMenu(List envList, String dft){
    return """def list=
    return ['C','D']
    """
}

//println getFileHubList("hqzhang/solution-repo","release",'getsolution')
//println menu.getContentScript('SolutionConfig')

properties([
        disableConcurrentBuilds(),
        //pipelineTriggers([bitbucketPush()]),
        parameters([
            [$class: 'ChoiceParameter', choiceType: 'PT_SINGLE_SELECT', filterLength: 1, filterable: false,
                name: 'Environment', randomName: 'choice-parameter-974670813475178',
                script: [$class: 'GroovyScript', fallbackScript: [classpath: [], oldScript: '', sandbox: false, script: ''],
                script: [classpath: [], oldScript: '', sandbox: true,
                script: menu.buildScript(envList,'DEV')]]],

            [$class: 'CascadeChoiceParameter', choiceType: 'PT_SINGLE_SELECT', filterLength: 1, filterable: false,
                name: 'Server', randomName: 'choice-parameter-16677189047441', referencedParameters: 'Environment', 
                script: [$class: 'GroovyScript', fallbackScript: [classpath: [], oldScript: '', sandbox: true, script: ''], 
                script: [classpath: [], oldScript: '', sandbox: true, 
                script: getServerList('Environment') ]]],
            
            [$class: 'CascadeChoiceParameter', choiceType: 'PT_SINGLE_SELECT', filterLength: 1, filterable: false,
                name: 'Version', randomName: 'choice-parameter-16677189047461', referencedParameters: 'Environment', 
                script: [$class: 'GroovyScript', fallbackScript: [classpath: [], oldScript: '', sandbox: true, script: ''], 
                script: [classpath: [], oldScript: '', sandbox: true, 
                script: menu.
                getBranchScript('solution-repo','default') ]]],

            [$class: 'CascadeChoiceParameter', choiceType: 'PT_SINGLE_SELECT', filterLength: 1, filterable: false,
                name: 'Configuration', randomName: 'choice-parameter-16677189047451', referencedParameters: 'Environment', 
                script: [$class: 'GroovyScript', fallbackScript: [classpath: [], oldScript: '', sandbox: true, script: ''], 
                script: [classpath: [], oldScript: '', sandbox: true, 
                script: menu.getFileHubFullSW('Environment') ]]],

            [$class: 'DynamicReferenceParameter', choiceType: 'ET_FORMATTED_HTML', 
                name: 'Components',omitValueField: false, randomName: 'choice-parameter-138673186839723', 
                referencedParameters: 'Configuration', 
                script: [$class: 'GroovyScript', fallbackScript: [classpath: [], oldScript: '', sandbox: false, script: ''],
                script: [classpath: [], oldScript: '', sandbox: true, 
                script: menu.getContentInstant('Configuration')]] ], 
            
            [$class: 'DynamicReferenceParameter', choiceType: 'ET_FORMATTED_HTML',  omitValueField: false, 
                name: 'SolutionBackup',randomName: 'choice-parameter-138673286839724', 
                referencedParameters: 'Components,Environment,Configuration', 
                script: [$class: 'GroovyScript', fallbackScript: [classpath: [], oldScript: '', sandbox: false, script: ''],
                script: [classpath: [], oldScript: '', sandbox: true, 
                script: menu.getSolutionBackup('Components','Environment','Configuration')]] ],

            [$class: 'DynamicReferenceParameter', choiceType: 'ET_FORMATTED_HTML', 
                name: 'saveRollBack',omitValueField: false, randomName: 'choice-parameter-138673186839723', 
                referencedParameters: 'Components,Environment,Configuration', 
                script: [$class: 'GroovyScript', fallbackScript: [classpath: [], oldScript: '', sandbox: false, script: ''],
                script: [classpath: [], oldScript: '', sandbox: true, 
                script: menu.getRollBackScript('Components','Environment','Configuration')]] ], 

            /*[$class: 'DynamicReferenceParameter', choiceType: 'ET_TEXT_BOX',  omitValueField: false, 
                name: 'SaveConfig',randomName: 'choice-parameter-138683286839733', referencedParameters: 'Component',
                script: [$class: 'GroovyScript', fallbackScript: [classpath: [], oldScript: '', sandbox: false, script: ''],
                script: [classpath: [], oldScroipt: '', sandbox: true, 
                script: menu.getSolutionBackup('Component')]] ],                                                                                                                                                                                                                ')]] ],
           
            [$class: 'CascadeChoiceParameter', choiceType: 'PT_SINGLE_SELECT', filterLength: 1, filterable: false,
               name: 'getBranchList', randomName: 'choice-parameter-16677189047440', referencedParameters: 'repoName', 
               script: [$class: 'GroovyScript', fallbackScript: [classpath: [], oldScript: '', sandbox: true, script: ''], 
               script: [classpath: [], oldScript: '', sandbox: true, 
               script: getBranchList('repoName') ]]],
        
            [$class: 'CascadeChoiceParameter', choiceType: 'PT_SINGLE_SELECT', filterLength: 1, filterable: false,
               name: 'getFileBitScript', randomName: 'choice-parameter-16677189047460', referencedParameters: 'Environment', 
               script: [$class: 'GroovyScript', fallbackScript: [classpath: [], oldScript: '', sandbox: true, script: ''], 
               script: [classpath: [], oldScript: '', sandbox: true, 
               script: getFileBitScript("wave-cloud/groovytest","release",brch) ]]],

            [$class: 'CascadeChoiceParameter', choiceType: 'PT_SINGLE_SELECT', filterLength: 1, filterable: false,
               name: 'Package', randomName: 'choice-parameter-16677189047489', referencedParameters: 'filebackup', 
               script: [$class: 'GroovyScript', fallbackScript: [classpath: [], oldScript: '', sandbox: true, script: ''], 
               script: [classpath: [], oldScript: '', sandbox: true, 
               script: getPackList('~/workspace/myscripts','myfile') ]]],
            

            [ $class: 'CascadeChoiceParameter', choiceType: 'PT_SINGLE_SELECT', filterLength: 1, filterable: false,
               name: 'SolutionConfig', randomName: 'choice-parameter-16677189047798', referencedParameters: 'startRollback', 
               script: [$class: 'GroovyScript', fallbackScript: [classpath: [], oldScript: '', sandbox: true, script: ''], 
               script: [classpath: [], oldScript: '', sandbox: true, 
               script: menu.getFileBitScript('startRollback')  ]]],

            [$class: 'DynamicReferenceParameter', choiceType: 'ET_FORMATTED_HTML', 
                name: 'Component',omitValueField: false, randomName: 'choice-parameter-138673186839723', referencedParameters: 'SolutionConfig', 
                script: [$class: 'GroovyScript', fallbackScript: [classpath: [], oldScript: '', sandbox: false, script: ''],
                script: [classpath: [], oldScript: '', sandbox: true, 
                script: menu.getContentScript('SolutionConfig')]] ], 

            [$class: 'DynamicReferenceParameter', choiceType: 'ET_FORMATTED_HTML', name: 'Components', 
                   name: 'Components', omitValueField: false, randomName: 'choice-parameter-138673186839723', referencedParameters: 'SolutionConfig', 
                   script: [$class: 'GroovyScript', fallbackScript: [classpath: [], oldScript: '', sandbox: false, script: ''],
                    script: [classpath: [], oldScript: '', sandbox: true, 
                    script: menu.getContentTable('SolutionConfig' )]] ],

            booleanParam( name: 'startRollback',  defaultValue: true),

            [ $class: 'CascadeChoiceParameter', choiceType: 'PT_SINGLE_SELECT', filterLength: 1, filterable: false,
               name: 'RollbackList', randomName: 'choice-parameter-16687189047799', referencedParameters: 'startRollback', 
               script: [$class: 'GroovyScript', fallbackScript: [classpath: [], oldScript: '', sandbox: true, script: ''], 
               script: [classpath: [], oldScript: '', sandbox: true, 
               script: menu.getRollbackList('startRollback','PRIOR') ]]],

            [ $class: 'CascadeChoiceParameter', choiceType: 'PT_CHECKBOX', filterLength: 1, filterable: false,
               name: 'RollbackTypeList', randomName: 'choice-parameter-16677189047799', referencedParameters: 'RollbackList', 
               script: [$class: 'GroovyScript', fallbackScript: [classpath: [], oldScript: '', sandbox: true, script: ''], 
               script: [classpath: [], oldScript: '', sandbox: true, 
               script: menu.getTypeScript('RollbackList')  ]]],

            [$class: 'DynamicReferenceParameter', choiceType: 'ET_FORMATTED_HTML',  omitValueField: false, 
                    name: 'filebackup',randomName: 'choice-parameter-138673286839723', referencedParameters: 'SolutionConfig', 
                    script: [$class: 'GroovyScript', fallbackScript: [classpath: [], oldScript: '', sandbox: false, script: ''],
                    script: [classpath: [], oldScript: '', sandbox: true, 
                    script: menu.getString('SolutionConfig')]] ],
            
            separator(name: "end"), */
              
            
])
])////
//mypipeline( params )

println "-----------begin pipeline-------"
def map
def list
def remote = [:]
remote.name = "root"
remote.host = "192.168.0.16"
remote.allowAnyHosts = true
//println menu.getCompList('mypack')
//println menu.gitCompVerify()
def stringConvert(String data){
    return data.replaceAll(/\\n/,'\n').replace(/,/,'').trim()
}

pipeline {
    agent any
    environment {
        SolutionBackup="${env.SolutionBackup}".replaceAll(',','')
        backupFile="${env.WORKSPACE}/release/${SolutionBackup}"
        repoName='solution-repo'
        repoBranch='getsolution'
        target="tgrpanv@${env.Server}"
        PATH="/usr/local/bin:$PATH"
        sourceFile='examples'
        destFile='output'
       
        inputFull='examples'

    }
    stages {
        
        stage('Create List') {
            when { expression { return !env.Configuration.contains('INIT') } }
            steps {
                script {
                    println "STAGE: create List..."
                    
                   
                    myMethods.greet("Alice")
                    println "download solution repo"
                    Utils.gitCloneGithub(repoName,repoBranch)

                    println "save backup file locally====="
                    menu.saveBackupFile(env.Components, backupFile)

                    println "clean virtual machine======="
                    sh """
                        printenv
                        VBoxManage list vms
                        #VBoxManage controlvm "node-01" poweroff
                        #VBoxManage unregistervm "node-01" --delete
                    """
                    
                    println "create virtual machine==="
                   
                    /*println "save backup file to repo"
                    menu.saveSolutionBackup(backupFile)
                   
                    println "update Solution yml files"
                    sh """
                         who am i
                        /Users/hongqizhang/anaconda3/bin/activate
                        cd solution;
                        python3 solution_update.py ${sourceFile} ${destFile} ${backupFile} ${inputFull}
                    """*/

                    println "save backup file to repo"
                    def binPath=[ ARC: '/app/anvil/repositoy/ARC508p6',
                                    ADS: '/app/anvil/repositoy/ADS123' ]
                    //menu.deployInstallBin(Components, binPath)
                   
                    /*println "Play ansible"
                    menu.createHosts(String fileName, List target)
                    menu.createValues(String fileName)
                    ansiblePlaybook(credentailsId: 'targetcredid', inventory: 'host', playbook: 'snapshot-downoad.yml')
                    ansiblePlaybook(credentailsId: 'targetcredid', inventory: 'host', playbook: 'generate-solution.yml')

                    ansiblePlaybook(credentailsId: 'targetcredid', inventory: 'host', playbook: 'deploy-config.yml')
                    ansiblePlaybook(credentailsId: 'targetcredid', inventory: 'host', playbook: 'verify-component.yml')*/

                    println "init=$env.initMenu"
                    println "get use function"
                    def comps=["b","a"]
                    def versions=["1","2"]
                    comps.eachWithIndex{ var, id->
                          println "com=$comps[id]"
                          println "ver=$versions[id]"
                    }
                  
                    if (currentBuild.previousBuild) {
                        try {
                            copyArtifacts(projectName: currentBuild.projectName,
                                          selector: specific("${currentBuild.previousBuild.number}"))
                            def previousFile = readFile(file: "usefulfile.txt")
                            echo("The current build is ${currentBuild.number}")
                            echo("The previous build artifact was: ${previousFile}")
                        } catch(err) {
                            // ignore error
                        }
                    }
                
                    //println menu.getCompList('mypack')
                    def build="${env.BUILD_NUMBER}"
                    println build
                    sh "echo ${build} > usefulfile.txt"
                    archiveArtifacts artifacts: 'usefulfile.txt', fingerprint: true
    
                }

            }
        }
        stage('Stage: Create Infrastructure'){
            steps {
                script {
                    echo "Stage: Create Infrastructure"
                    println "Play terraform"
                    //vbox.createVM()
                }
            }
        }
        
        stage('Stage: Build Docker Image'){
            steps {
                script {
                    echo "Stage: Build Image"
                    println "buildDocker Image"
                    //openshift.updateDataModel(env.scmWksp+"/ocmodel/mydatamodel.yaml",backupFile)
                    playoc.buildPush()
                }
            }
        }
         stage('Stage: Deploy Docker Image'){
            steps {
                script {
                    echo "Deploy Docker Image"
                    playoc.cleanDeploy()
                    sleep(time:30,unit:"SECONDS")
                }
            }
        }
        stage('Stage: Verification Test'){
            steps {
                script {
                    echo "Stage: Verification Test"
                    playoc.appVerify()
                    println "===================end verification======"
                    def token="/usr/local/bin/oc whoami --show-token".execute().text
                    def url='https://api.sandbox-m4.g2pi.p1.openshiftapps.com:6443'
                    def proj='hqzha-dev'
                    /*openshift.withCluster(url, token){
                        openshift.withProject(proj){  
                            echo "Get route url.."
                            def route  = openshift.selector('route','mynginx').object().spec.host
                    	    echo "${route}"  
                           
                        }
                    }*/                          
                }
            }
        }
    }
   post {
        
        always {
            
            //archiveArtifacts artifacts: 'file.extension', fingerprint: true
            println "do nothing"
        }
    }
}

